These are the TV-in drivers for the Allwinner A20.

* sun7i_tvd-linux-3.3: This is the driver as found in Linux 3.3 for Cubieboard
(https://github.com/cubieboard2/linux-sunxi/tree/sunxi-3.3-cb2)
* sun7i_tvd-lichee-android-linux3.3: The working driver distributed in Android 4.2 for MarsBoard 
(http://www.haoyuelectronics.com/service/A10-A20/A20-android-source-code/)
* sun7i_tvd-linux-3.4-working: Barebones porting to Linux 3.4

The Cubieboard and Android versions have some slight differences in the registers initialized and
in clock initialization code. My porting is pretty rough but can capture images:
* I "added" some missing #defines form missing files (this should be done in a better way)
* I forced the video field to be returned V4L2_FIELD_NONE as the docs specify
* I fixed the returned video dimensions (so ffmpeg is happy for example)

To have it working add the following lines to Kconfig

source "drivers/media/video/sun7i_tvd/Kconfig"

and Makefile 

obj-$(CONFIG_SUN7I_TVD) += sun7i_tvd/

in the /drivers/media/video directory

To use the TV input:

* Get https://github.com/ebutera/sunxi-tvin, compile it and run it as sudo
  If you have a HDMI display it should mirror the input on the display (I
  do not have one so I could not see the result). This program initializes
  all the private structures for the v4l2 driver, which seem not to be 
  cleared on exit.

* After you ran this program you should be able to capture from "normal"
  programs also
  
Test with ffmpeg
ffmpeg -f v4l2 -s 720x576 -pix_fmt nv12 -r 24 -t 10 -i /dev/video1 m.mpg

Test with gstreamer (save to file and play with mpv player, gstreamer videosink doesn't work, I don't know why):
gst-launch-1.0 v4l2src device=/dev/video1 ! video/x-raw,format=NV12,width=720,height=576 ! filesink location=raw_video.bin
mpv --demuxer rawvideo --demuxer-rawvideo-w 720 --demuxer-rawvideo-h 576 --demuxer-rawvideo-mp-format nv12 --demuxer-rawvideo-fps 25 raw_video.bin


Check available inputs: v4l2-ctl -d /dev/video1 --list-inputs
Get current input: v4l2-ctl -d /dev/video1 --get-input
Change input: v4l2-ctl -d /dev/video1 --set-input=X
Check available formats and framesizes FOR CURRENT INPUT: v4l2-ctl -d /dev/video1 -list-formats-ext

Inputs:
	input 0 = TV input 1
	input 1 = TV input 2
	input 2 = TV input 3
	input 3 = TV input 4
	input 4 = TV inputs 1 + 2
	input 5 = TV inputs 1 + 3
	input 6 = TV inputs 1 + 4
	input 7 = TV inputs 2 + 3
	input 8 = TV inputs 2 + 4
	input 0 = TV inputs 3 + 4
	input 0 = TV inputs 1 + 2 + 3 + 4
	
Inputs 0 - 3: video from only one camera
Inputs 4 - 9: video splited in 2 parts, one camera in each one
Input 10: video splited in 4 parts, one camera in each one

Framesizes available:
	for single camera (inputs 0 - 3): 720x480, 720x576, 704x480, 704x576
	for 2 cameras, vertical split (inputs 4 - 9): 1440x480, 1440x576, 1408x480, 1408x576
	for 2 cameras, horizontal split (inputs 4 - 9): 720x960, 720x1152, 704x960, 704x1152
	for 4 cameras (input 10): 1440x960, 1440x1152, 1408x960, 1408x1152
	
To display multi-camera with ffmpeg or gstreamer, select input with v4l2-ctl first and run commands above
with a valid resolution for the chosen input.
